/*
 * This source file was generated by the Gradle 'init' task
 */
package javalab0;

import static org.testng.Assert.assertEquals;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
//import org.testng.collections.Objects;

public class AppTest {

	@Test(dataProvider = "integerProvider")
	public void integerTest(int p1, int p2, int p3) {
		assertEquals(new App().integerNumbersTask(p1, p2), p3, "for " + p1);
	}

	@DataProvider
	public Object[][] integerProvider() {
		return new Object[][] { { 100, 10, 10 }, { 12, 5, 2 }, { 139, 1, 139 } };
	}

	////////////////////////////////////////////////

	@Test(dataProvider = "ifProvider")
	public void ifTest(int p1, int p2, int p3, int p4) {
		assertEquals(new App().ifTask(p1, p2, p3), p4);
	}

	@DataProvider
	public Object[][] ifProvider() {
		return new Object[][] { { 2, 3, -1, 2 }, { 0, 0, 0, 0 }, { -3, -3, 1, 1 } };
	}

	//////////////////////////////////////////////////

	@Test(dataProvider = "booleanProvider")
	public void booleanTest(int p1, int p2, boolean p3) {
		assertEquals(new App().booleanTask(p1, p2), p3);
	}

	@DataProvider
	public Object[][] booleanProvider() {
		return new Object[][] { { 5, 1, true }, { 0, 0, false }, { -3, -3, false } };
	}

	//////////////////////////////////////////////////

	@Test(dataProvider = "switchProvider")
	public void switchTest(int p1, int p2) {
		assertEquals(new App().switchTask(p1), p2);
	}

	@DataProvider
	public Object[][] switchProvider() {
		return new Object[][] { { 3, 31 }, { 6, 30 }, { 2, 28 } };
	}

	///////////////////////////////////////////////////

	@Test(dataProvider = "forProvider")
	public void forTest(int n, int[] p2) {
		assertEquals(new App().forTask(n), p2);
	}

	@DataProvider
	public Object[][] forProvider() {
		int[] output1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
		int[] output2 = { 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000 };
		return new Object[][] { { 1, output1 }, { 100, output2 } };
	}

	///////////////////////////////////////////////////

	//////////////////////////////////////////

	@Test(dataProvider = "whileProvider")
	public void whileTest(int n, boolean c) {
		assertEquals(new App().whileTask(n), c);
	}

	@DataProvider
	public Object[][] whileProvider() {
		return new Object[][] { { 10, false }, { 3, true }, { 1, true }, { 2, false } };
	}

	@Test(expectedExceptions = AssertionError.class, dataProvider = "negativeWhileProvider")
	public void negativeWhileTest(int n) {
		new App().whileTask(n);
	}

	@DataProvider
	public Object[][] negativeWhileProvider() {
		return new Object[][] { { -1 }, { -2 } };
	}

	//////////////////////////////////////////
	@Test(dataProvider = "arrayProvider")
	public void arrayTest(int n, double a, double d, double[] result) {
		assertEquals(new App().arrayTask(n, a, d), result);
	}

	@DataProvider
	public Object[][] arrayProvider() {
		return new Object[][] { { 10, 1, 2, new double[] { 1, 2, 4, 8, 16, 32, 64, 128, 256, 512 } },
				{ 3, 1, -1 / 3, new double[] { 1, -1 / 3, 1 / 9 } } };
	}

	//////////////////////////////////////////

	@Test(dataProvider = "matrixProvider")
	public void twoDimensionArrayTest(int m, int n, int[] array, int[][] output) {
		assertEquals(new App().twoDimensionArrayTask(m, n, array), output);
	}

	@DataProvider
	public Object[][] matrixProvider() {

		int[] input = { 1, 2, 3, 4 };

		return new Object[][] { { 3, 4, input, new int[][] { input, input, input } } };
	}

	@Test(expectedExceptions = AssertionError.class, dataProvider = "negativeMatrixProvider")
	public void negativeDimensionArrayTest(int m, int n, int[] array) {
		new App().twoDimensionArrayTask(m, n, array);
	}

	@DataProvider
	public Object[][] negativeMatrixProvider() {
		int[] input = { 1, 2, 3, 4, 5 };
		return new Object[][] { { 3, 4, input } };
	}

	@Test
	public void arrayTest2() {
		assertEquals(new int[] { 2, 3 }, new int[] { 2, 3 });
	}

}
